#!/bin/sh
### BEGIN INIT INFO
# Provides:          nauru
# Required-Start:    $syslog $time
# Required-Stop:     $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Keep files in tmpfs
# Description:       It keeps files in tmpfs and periodically 
#                    copies them to real filesystem.
### END INIT INFO
#
# Author:	Bartosz P
#

# Warning: no spaces allowed in paths
ORIGINAL_DIR=/tmp/nd
COPY_DIR=$ORIGINAL_DIR-nauru
OWNER=bsp
PID_FILE=/tmp/nauru.pid
DAEMON_SCRIPT=/home/bsp/devel/nauru/naurud.py
DAEMON="python3 -u $DAEMON_SCRIPT $PID_FILE"
REDIRECT=/dev/null

mount_tmpfs() {
  if ! [ -d $ORIGINAL_DIR ]; then
    echo "Orignal dir does not exist: $ORIGINAL_DIR"
    return 1
  fi
  
  echo "Mounting tmpfs in $ORIGINAL_DIR"    
  mount -t tmpfs -o size=20m tmpfs $ORIGINAL_DIR
}

unmount_tmpfs() {
  echo "Unmounting tmpfs from $ORIGINAL_DIR"
  umount --lazy $ORIGINAL_DIR
}

# A file deleted in "original" dir will not be deleted from "copy" dir.
save_in_copy_dir() {
  mkdir -p $COPY_DIR
  chown $OWNER $COPY_DIR
  if [ $? -ne 0 ]; then
    echo "Failed to create copy dir: $COPY_DIR"
    return 1
  fi
  
  echo "Saving files from $ORIGINAL_DIR to $COPY_DIR"
  cp -a -t $COPY_DIR $ORIGINAL_DIR/*  
}

restore_from_copy_dir() {
  echo "Restoring files from $COPY_DIR to $ORIGINAL_DIR"
  cp -a -t $ORIGINAL_DIR $COPY_DIR/*  
}


case "$1" in
  start)
    if [ -f $PID_FILE ]; then
      echo "Error: PID file already exists"
      exit 1
    fi
    
    save_in_copy_dir || exit 1
    mount_tmpfs || exit 1
    restore_from_copy_dir
    if [ $? -ne 0 ]; then
      unmount_tmpfs
      exit 1
    fi
    
    echo "Starting: $DAEMON"
    nohup $DAEMON < /dev/null 1> $REDIRECT 2> $REDIRECT &        
    exit $?
    ;;
  
  stop)       
    CURR_PID=`cat $PID_FILE`
    echo "PID: $CURR_PID"
    if [ -n "$CURR_PID" ]; then
      echo "Stopping $DAEMON"     
      echo "Sending TERM"
      kill $CURR_PID
      KILL_RESULT=$?
      if [ "$KILL_RESULT" = "0" ]; then
        echo "Killed"
        rm -f $PID_FILE   
      else
        echo "Failed to kill"
        exit 1
      fi
            
      save_in_copy_dir
      unmount_tmpfs
      restore_from_copy_dir
    fi    
    ;;
    
  force-reload|restart)
    $0 stop
    $0 start
    ;;
  
  status)
    echo "PID file:"
    ls -l $PID_FILE
    cat $PID_FILE
    echo
    ;;
    
  *)
    echo "Bad arguments!"
    exit 1
    ;;
esac

exit 0
